// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MastCompany is an object representing the database table.
type MastCompany struct {
	CompanyCode string      `boil:"company_code" json:"company_code" toml:"company_code" yaml:"company_code"`
	CompanyName string      `boil:"company_name" json:"company_name" toml:"company_name" yaml:"company_name"`
	Address     string      `boil:"address" json:"address" toml:"address" yaml:"address"`
	Telephone   string      `boil:"telephone" json:"telephone" toml:"telephone" yaml:"telephone"`
	Email       string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	Deleted     bool        `boil:"deleted" json:"deleted" toml:"deleted" yaml:"deleted"`
	CreateDate  null.Time   `boil:"create_date" json:"create_date,omitempty" toml:"create_date" yaml:"create_date,omitempty"`
	ModifyDate  null.Time   `boil:"modify_date" json:"modify_date,omitempty" toml:"modify_date" yaml:"modify_date,omitempty"`
	DeletedDate null.Time   `boil:"deleted_date" json:"deleted_date,omitempty" toml:"deleted_date" yaml:"deleted_date,omitempty"`
	CreateID    string      `boil:"create_id" json:"create_id" toml:"create_id" yaml:"create_id"`
	ModifyID    null.String `boil:"modify_id" json:"modify_id,omitempty" toml:"modify_id" yaml:"modify_id,omitempty"`
	DeletedID   null.String `boil:"deleted_id" json:"deleted_id,omitempty" toml:"deleted_id" yaml:"deleted_id,omitempty"`
	Fax         null.String `boil:"fax" json:"fax,omitempty" toml:"fax" yaml:"fax,omitempty"`
	URL         null.String `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`

	R *mastCompanyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mastCompanyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MastCompanyColumns = struct {
	CompanyCode string
	CompanyName string
	Address     string
	Telephone   string
	Email       string
	Deleted     string
	CreateDate  string
	ModifyDate  string
	DeletedDate string
	CreateID    string
	ModifyID    string
	DeletedID   string
	Fax         string
	URL         string
	ID          string
}{
	CompanyCode: "company_code",
	CompanyName: "company_name",
	Address:     "address",
	Telephone:   "telephone",
	Email:       "email",
	Deleted:     "deleted",
	CreateDate:  "create_date",
	ModifyDate:  "modify_date",
	DeletedDate: "deleted_date",
	CreateID:    "create_id",
	ModifyID:    "modify_id",
	DeletedID:   "deleted_id",
	Fax:         "fax",
	URL:         "url",
	ID:          "id",
}

var MastCompanyTableColumns = struct {
	CompanyCode string
	CompanyName string
	Address     string
	Telephone   string
	Email       string
	Deleted     string
	CreateDate  string
	ModifyDate  string
	DeletedDate string
	CreateID    string
	ModifyID    string
	DeletedID   string
	Fax         string
	URL         string
	ID          string
}{
	CompanyCode: "mast_company.company_code",
	CompanyName: "mast_company.company_name",
	Address:     "mast_company.address",
	Telephone:   "mast_company.telephone",
	Email:       "mast_company.email",
	Deleted:     "mast_company.deleted",
	CreateDate:  "mast_company.create_date",
	ModifyDate:  "mast_company.modify_date",
	DeletedDate: "mast_company.deleted_date",
	CreateID:    "mast_company.create_id",
	ModifyID:    "mast_company.modify_id",
	DeletedID:   "mast_company.deleted_id",
	Fax:         "mast_company.fax",
	URL:         "mast_company.url",
	ID:          "mast_company.id",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var MastCompanyWhere = struct {
	CompanyCode whereHelperstring
	CompanyName whereHelperstring
	Address     whereHelperstring
	Telephone   whereHelperstring
	Email       whereHelperstring
	Deleted     whereHelperbool
	CreateDate  whereHelpernull_Time
	ModifyDate  whereHelpernull_Time
	DeletedDate whereHelpernull_Time
	CreateID    whereHelperstring
	ModifyID    whereHelpernull_String
	DeletedID   whereHelpernull_String
	Fax         whereHelpernull_String
	URL         whereHelpernull_String
	ID          whereHelperint64
}{
	CompanyCode: whereHelperstring{field: "\"mast_company\".\"company_code\""},
	CompanyName: whereHelperstring{field: "\"mast_company\".\"company_name\""},
	Address:     whereHelperstring{field: "\"mast_company\".\"address\""},
	Telephone:   whereHelperstring{field: "\"mast_company\".\"telephone\""},
	Email:       whereHelperstring{field: "\"mast_company\".\"email\""},
	Deleted:     whereHelperbool{field: "\"mast_company\".\"deleted\""},
	CreateDate:  whereHelpernull_Time{field: "\"mast_company\".\"create_date\""},
	ModifyDate:  whereHelpernull_Time{field: "\"mast_company\".\"modify_date\""},
	DeletedDate: whereHelpernull_Time{field: "\"mast_company\".\"deleted_date\""},
	CreateID:    whereHelperstring{field: "\"mast_company\".\"create_id\""},
	ModifyID:    whereHelpernull_String{field: "\"mast_company\".\"modify_id\""},
	DeletedID:   whereHelpernull_String{field: "\"mast_company\".\"deleted_id\""},
	Fax:         whereHelpernull_String{field: "\"mast_company\".\"fax\""},
	URL:         whereHelpernull_String{field: "\"mast_company\".\"url\""},
	ID:          whereHelperint64{field: "\"mast_company\".\"id\""},
}

// MastCompanyRels is where relationship names are stored.
var MastCompanyRels = struct {
}{}

// mastCompanyR is where relationships are stored.
type mastCompanyR struct {
}

// NewStruct creates a new relationship struct
func (*mastCompanyR) NewStruct() *mastCompanyR {
	return &mastCompanyR{}
}

// mastCompanyL is where Load methods for each relationship are stored.
type mastCompanyL struct{}

var (
	mastCompanyAllColumns            = []string{"company_code", "company_name", "address", "telephone", "email", "deleted", "create_date", "modify_date", "deleted_date", "create_id", "modify_id", "deleted_id", "fax", "url", "id"}
	mastCompanyColumnsWithoutDefault = []string{"modify_date", "deleted_date"}
	mastCompanyColumnsWithDefault    = []string{"company_code", "company_name", "address", "telephone", "email", "deleted", "create_date", "create_id", "modify_id", "deleted_id", "fax", "url", "id"}
	mastCompanyPrimaryKeyColumns     = []string{"company_code"}
)

type (
	// MastCompanySlice is an alias for a slice of pointers to MastCompany.
	// This should almost always be used instead of []MastCompany.
	MastCompanySlice []*MastCompany
	// MastCompanyHook is the signature for custom MastCompany hook methods
	MastCompanyHook func(context.Context, boil.ContextExecutor, *MastCompany) error

	mastCompanyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mastCompanyType                 = reflect.TypeOf(&MastCompany{})
	mastCompanyMapping              = queries.MakeStructMapping(mastCompanyType)
	mastCompanyPrimaryKeyMapping, _ = queries.BindMapping(mastCompanyType, mastCompanyMapping, mastCompanyPrimaryKeyColumns)
	mastCompanyInsertCacheMut       sync.RWMutex
	mastCompanyInsertCache          = make(map[string]insertCache)
	mastCompanyUpdateCacheMut       sync.RWMutex
	mastCompanyUpdateCache          = make(map[string]updateCache)
	mastCompanyUpsertCacheMut       sync.RWMutex
	mastCompanyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mastCompanyBeforeInsertHooks []MastCompanyHook
var mastCompanyBeforeUpdateHooks []MastCompanyHook
var mastCompanyBeforeDeleteHooks []MastCompanyHook
var mastCompanyBeforeUpsertHooks []MastCompanyHook

var mastCompanyAfterInsertHooks []MastCompanyHook
var mastCompanyAfterSelectHooks []MastCompanyHook
var mastCompanyAfterUpdateHooks []MastCompanyHook
var mastCompanyAfterDeleteHooks []MastCompanyHook
var mastCompanyAfterUpsertHooks []MastCompanyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MastCompany) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastCompanyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MastCompany) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastCompanyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MastCompany) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastCompanyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MastCompany) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastCompanyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MastCompany) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastCompanyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MastCompany) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastCompanyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MastCompany) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastCompanyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MastCompany) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastCompanyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MastCompany) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastCompanyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMastCompanyHook registers your hook function for all future operations.
func AddMastCompanyHook(hookPoint boil.HookPoint, mastCompanyHook MastCompanyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mastCompanyBeforeInsertHooks = append(mastCompanyBeforeInsertHooks, mastCompanyHook)
	case boil.BeforeUpdateHook:
		mastCompanyBeforeUpdateHooks = append(mastCompanyBeforeUpdateHooks, mastCompanyHook)
	case boil.BeforeDeleteHook:
		mastCompanyBeforeDeleteHooks = append(mastCompanyBeforeDeleteHooks, mastCompanyHook)
	case boil.BeforeUpsertHook:
		mastCompanyBeforeUpsertHooks = append(mastCompanyBeforeUpsertHooks, mastCompanyHook)
	case boil.AfterInsertHook:
		mastCompanyAfterInsertHooks = append(mastCompanyAfterInsertHooks, mastCompanyHook)
	case boil.AfterSelectHook:
		mastCompanyAfterSelectHooks = append(mastCompanyAfterSelectHooks, mastCompanyHook)
	case boil.AfterUpdateHook:
		mastCompanyAfterUpdateHooks = append(mastCompanyAfterUpdateHooks, mastCompanyHook)
	case boil.AfterDeleteHook:
		mastCompanyAfterDeleteHooks = append(mastCompanyAfterDeleteHooks, mastCompanyHook)
	case boil.AfterUpsertHook:
		mastCompanyAfterUpsertHooks = append(mastCompanyAfterUpsertHooks, mastCompanyHook)
	}
}

// One returns a single mastCompany record from the query.
func (q mastCompanyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MastCompany, error) {
	o := &MastCompany{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for mast_company")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MastCompany records from the query.
func (q mastCompanyQuery) All(ctx context.Context, exec boil.ContextExecutor) (MastCompanySlice, error) {
	var o []*MastCompany

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MastCompany slice")
	}

	if len(mastCompanyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MastCompany records in the query.
func (q mastCompanyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count mast_company rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mastCompanyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if mast_company exists")
	}

	return count > 0, nil
}

// MastCompanies retrieves all the records using an executor.
func MastCompanies(mods ...qm.QueryMod) mastCompanyQuery {
	mods = append(mods, qm.From("\"mast_company\""))
	return mastCompanyQuery{NewQuery(mods...)}
}

// FindMastCompany retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMastCompany(ctx context.Context, exec boil.ContextExecutor, companyCode string, selectCols ...string) (*MastCompany, error) {
	mastCompanyObj := &MastCompany{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mast_company\" where \"company_code\"=$1", sel,
	)

	q := queries.Raw(query, companyCode)

	err := q.Bind(ctx, exec, mastCompanyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from mast_company")
	}

	if err = mastCompanyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mastCompanyObj, err
	}

	return mastCompanyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MastCompany) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mast_company provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mastCompanyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mastCompanyInsertCacheMut.RLock()
	cache, cached := mastCompanyInsertCache[key]
	mastCompanyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mastCompanyAllColumns,
			mastCompanyColumnsWithDefault,
			mastCompanyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mastCompanyType, mastCompanyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mastCompanyType, mastCompanyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mast_company\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mast_company\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into mast_company")
	}

	if !cached {
		mastCompanyInsertCacheMut.Lock()
		mastCompanyInsertCache[key] = cache
		mastCompanyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MastCompany.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MastCompany) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mastCompanyUpdateCacheMut.RLock()
	cache, cached := mastCompanyUpdateCache[key]
	mastCompanyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mastCompanyAllColumns,
			mastCompanyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update mast_company, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mast_company\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mastCompanyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mastCompanyType, mastCompanyMapping, append(wl, mastCompanyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update mast_company row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for mast_company")
	}

	if !cached {
		mastCompanyUpdateCacheMut.Lock()
		mastCompanyUpdateCache[key] = cache
		mastCompanyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mastCompanyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for mast_company")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for mast_company")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MastCompanySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mastCompanyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mast_company\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mastCompanyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mastCompany slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mastCompany")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MastCompany) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mast_company provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mastCompanyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mastCompanyUpsertCacheMut.RLock()
	cache, cached := mastCompanyUpsertCache[key]
	mastCompanyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mastCompanyAllColumns,
			mastCompanyColumnsWithDefault,
			mastCompanyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mastCompanyAllColumns,
			mastCompanyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert mast_company, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mastCompanyPrimaryKeyColumns))
			copy(conflict, mastCompanyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mast_company\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mastCompanyType, mastCompanyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mastCompanyType, mastCompanyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert mast_company")
	}

	if !cached {
		mastCompanyUpsertCacheMut.Lock()
		mastCompanyUpsertCache[key] = cache
		mastCompanyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MastCompany record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MastCompany) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MastCompany provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mastCompanyPrimaryKeyMapping)
	sql := "DELETE FROM \"mast_company\" WHERE \"company_code\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from mast_company")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for mast_company")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mastCompanyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mastCompanyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mast_company")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mast_company")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MastCompanySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mastCompanyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mastCompanyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mast_company\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mastCompanyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mastCompany slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mast_company")
	}

	if len(mastCompanyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MastCompany) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMastCompany(ctx, exec, o.CompanyCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MastCompanySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MastCompanySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mastCompanyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mast_company\".* FROM \"mast_company\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mastCompanyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MastCompanySlice")
	}

	*o = slice

	return nil
}

// MastCompanyExists checks if the MastCompany row exists.
func MastCompanyExists(ctx context.Context, exec boil.ContextExecutor, companyCode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mast_company\" where \"company_code\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, companyCode)
	}
	row := exec.QueryRowContext(ctx, sql, companyCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if mast_company exists")
	}

	return exists, nil
}
