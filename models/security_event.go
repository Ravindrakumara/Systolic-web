// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SecurityEvent is an object representing the database table.
type SecurityEvent struct {
	ModuleCode string `boil:"module_code" json:"module_code" toml:"module_code" yaml:"module_code"`
	ScreenCode string `boil:"screen_code" json:"screen_code" toml:"screen_code" yaml:"screen_code"`
	EventCode  string `boil:"event_code" json:"event_code" toml:"event_code" yaml:"event_code"`
	EventName  string `boil:"event_name" json:"event_name" toml:"event_name" yaml:"event_name"`
	ReportNo   string `boil:"report_no" json:"report_no" toml:"report_no" yaml:"report_no"`
	ReportType string `boil:"report_type" json:"report_type" toml:"report_type" yaml:"report_type"`
	ID         int64  `boil:"id" json:"id" toml:"id" yaml:"id"`

	R *securityEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L securityEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SecurityEventColumns = struct {
	ModuleCode string
	ScreenCode string
	EventCode  string
	EventName  string
	ReportNo   string
	ReportType string
	ID         string
}{
	ModuleCode: "module_code",
	ScreenCode: "screen_code",
	EventCode:  "event_code",
	EventName:  "event_name",
	ReportNo:   "report_no",
	ReportType: "report_type",
	ID:         "id",
}

var SecurityEventTableColumns = struct {
	ModuleCode string
	ScreenCode string
	EventCode  string
	EventName  string
	ReportNo   string
	ReportType string
	ID         string
}{
	ModuleCode: "security_event.module_code",
	ScreenCode: "security_event.screen_code",
	EventCode:  "security_event.event_code",
	EventName:  "security_event.event_name",
	ReportNo:   "security_event.report_no",
	ReportType: "security_event.report_type",
	ID:         "security_event.id",
}

// Generated where

var SecurityEventWhere = struct {
	ModuleCode whereHelperstring
	ScreenCode whereHelperstring
	EventCode  whereHelperstring
	EventName  whereHelperstring
	ReportNo   whereHelperstring
	ReportType whereHelperstring
	ID         whereHelperint64
}{
	ModuleCode: whereHelperstring{field: "\"security_event\".\"module_code\""},
	ScreenCode: whereHelperstring{field: "\"security_event\".\"screen_code\""},
	EventCode:  whereHelperstring{field: "\"security_event\".\"event_code\""},
	EventName:  whereHelperstring{field: "\"security_event\".\"event_name\""},
	ReportNo:   whereHelperstring{field: "\"security_event\".\"report_no\""},
	ReportType: whereHelperstring{field: "\"security_event\".\"report_type\""},
	ID:         whereHelperint64{field: "\"security_event\".\"id\""},
}

// SecurityEventRels is where relationship names are stored.
var SecurityEventRels = struct {
}{}

// securityEventR is where relationships are stored.
type securityEventR struct {
}

// NewStruct creates a new relationship struct
func (*securityEventR) NewStruct() *securityEventR {
	return &securityEventR{}
}

// securityEventL is where Load methods for each relationship are stored.
type securityEventL struct{}

var (
	securityEventAllColumns            = []string{"module_code", "screen_code", "event_code", "event_name", "report_no", "report_type", "id"}
	securityEventColumnsWithoutDefault = []string{"module_code", "screen_code", "event_code", "event_name"}
	securityEventColumnsWithDefault    = []string{"report_no", "report_type", "id"}
	securityEventPrimaryKeyColumns     = []string{"module_code", "screen_code", "event_code"}
)

type (
	// SecurityEventSlice is an alias for a slice of pointers to SecurityEvent.
	// This should almost always be used instead of []SecurityEvent.
	SecurityEventSlice []*SecurityEvent
	// SecurityEventHook is the signature for custom SecurityEvent hook methods
	SecurityEventHook func(context.Context, boil.ContextExecutor, *SecurityEvent) error

	securityEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	securityEventType                 = reflect.TypeOf(&SecurityEvent{})
	securityEventMapping              = queries.MakeStructMapping(securityEventType)
	securityEventPrimaryKeyMapping, _ = queries.BindMapping(securityEventType, securityEventMapping, securityEventPrimaryKeyColumns)
	securityEventInsertCacheMut       sync.RWMutex
	securityEventInsertCache          = make(map[string]insertCache)
	securityEventUpdateCacheMut       sync.RWMutex
	securityEventUpdateCache          = make(map[string]updateCache)
	securityEventUpsertCacheMut       sync.RWMutex
	securityEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var securityEventBeforeInsertHooks []SecurityEventHook
var securityEventBeforeUpdateHooks []SecurityEventHook
var securityEventBeforeDeleteHooks []SecurityEventHook
var securityEventBeforeUpsertHooks []SecurityEventHook

var securityEventAfterInsertHooks []SecurityEventHook
var securityEventAfterSelectHooks []SecurityEventHook
var securityEventAfterUpdateHooks []SecurityEventHook
var securityEventAfterDeleteHooks []SecurityEventHook
var securityEventAfterUpsertHooks []SecurityEventHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SecurityEvent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range securityEventBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SecurityEvent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range securityEventBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SecurityEvent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range securityEventBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SecurityEvent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range securityEventBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SecurityEvent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range securityEventAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SecurityEvent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range securityEventAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SecurityEvent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range securityEventAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SecurityEvent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range securityEventAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SecurityEvent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range securityEventAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSecurityEventHook registers your hook function for all future operations.
func AddSecurityEventHook(hookPoint boil.HookPoint, securityEventHook SecurityEventHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		securityEventBeforeInsertHooks = append(securityEventBeforeInsertHooks, securityEventHook)
	case boil.BeforeUpdateHook:
		securityEventBeforeUpdateHooks = append(securityEventBeforeUpdateHooks, securityEventHook)
	case boil.BeforeDeleteHook:
		securityEventBeforeDeleteHooks = append(securityEventBeforeDeleteHooks, securityEventHook)
	case boil.BeforeUpsertHook:
		securityEventBeforeUpsertHooks = append(securityEventBeforeUpsertHooks, securityEventHook)
	case boil.AfterInsertHook:
		securityEventAfterInsertHooks = append(securityEventAfterInsertHooks, securityEventHook)
	case boil.AfterSelectHook:
		securityEventAfterSelectHooks = append(securityEventAfterSelectHooks, securityEventHook)
	case boil.AfterUpdateHook:
		securityEventAfterUpdateHooks = append(securityEventAfterUpdateHooks, securityEventHook)
	case boil.AfterDeleteHook:
		securityEventAfterDeleteHooks = append(securityEventAfterDeleteHooks, securityEventHook)
	case boil.AfterUpsertHook:
		securityEventAfterUpsertHooks = append(securityEventAfterUpsertHooks, securityEventHook)
	}
}

// One returns a single securityEvent record from the query.
func (q securityEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SecurityEvent, error) {
	o := &SecurityEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for security_event")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SecurityEvent records from the query.
func (q securityEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (SecurityEventSlice, error) {
	var o []*SecurityEvent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SecurityEvent slice")
	}

	if len(securityEventAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SecurityEvent records in the query.
func (q securityEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count security_event rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q securityEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if security_event exists")
	}

	return count > 0, nil
}

// SecurityEvents retrieves all the records using an executor.
func SecurityEvents(mods ...qm.QueryMod) securityEventQuery {
	mods = append(mods, qm.From("\"security_event\""))
	return securityEventQuery{NewQuery(mods...)}
}

// FindSecurityEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSecurityEvent(ctx context.Context, exec boil.ContextExecutor, moduleCode string, screenCode string, eventCode string, selectCols ...string) (*SecurityEvent, error) {
	securityEventObj := &SecurityEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"security_event\" where \"module_code\"=$1 AND \"screen_code\"=$2 AND \"event_code\"=$3", sel,
	)

	q := queries.Raw(query, moduleCode, screenCode, eventCode)

	err := q.Bind(ctx, exec, securityEventObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from security_event")
	}

	if err = securityEventObj.doAfterSelectHooks(ctx, exec); err != nil {
		return securityEventObj, err
	}

	return securityEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SecurityEvent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no security_event provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(securityEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	securityEventInsertCacheMut.RLock()
	cache, cached := securityEventInsertCache[key]
	securityEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			securityEventAllColumns,
			securityEventColumnsWithDefault,
			securityEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(securityEventType, securityEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(securityEventType, securityEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"security_event\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"security_event\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into security_event")
	}

	if !cached {
		securityEventInsertCacheMut.Lock()
		securityEventInsertCache[key] = cache
		securityEventInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SecurityEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SecurityEvent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	securityEventUpdateCacheMut.RLock()
	cache, cached := securityEventUpdateCache[key]
	securityEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			securityEventAllColumns,
			securityEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update security_event, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"security_event\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, securityEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(securityEventType, securityEventMapping, append(wl, securityEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update security_event row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for security_event")
	}

	if !cached {
		securityEventUpdateCacheMut.Lock()
		securityEventUpdateCache[key] = cache
		securityEventUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q securityEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for security_event")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for security_event")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SecurityEventSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), securityEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"security_event\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, securityEventPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in securityEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all securityEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SecurityEvent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no security_event provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(securityEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	securityEventUpsertCacheMut.RLock()
	cache, cached := securityEventUpsertCache[key]
	securityEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			securityEventAllColumns,
			securityEventColumnsWithDefault,
			securityEventColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			securityEventAllColumns,
			securityEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert security_event, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(securityEventPrimaryKeyColumns))
			copy(conflict, securityEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"security_event\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(securityEventType, securityEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(securityEventType, securityEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert security_event")
	}

	if !cached {
		securityEventUpsertCacheMut.Lock()
		securityEventUpsertCache[key] = cache
		securityEventUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SecurityEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SecurityEvent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SecurityEvent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), securityEventPrimaryKeyMapping)
	sql := "DELETE FROM \"security_event\" WHERE \"module_code\"=$1 AND \"screen_code\"=$2 AND \"event_code\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from security_event")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for security_event")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q securityEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no securityEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from security_event")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for security_event")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SecurityEventSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(securityEventBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), securityEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"security_event\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, securityEventPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from securityEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for security_event")
	}

	if len(securityEventAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SecurityEvent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSecurityEvent(ctx, exec, o.ModuleCode, o.ScreenCode, o.EventCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SecurityEventSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SecurityEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), securityEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"security_event\".* FROM \"security_event\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, securityEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SecurityEventSlice")
	}

	*o = slice

	return nil
}

// SecurityEventExists checks if the SecurityEvent row exists.
func SecurityEventExists(ctx context.Context, exec boil.ContextExecutor, moduleCode string, screenCode string, eventCode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"security_event\" where \"module_code\"=$1 AND \"screen_code\"=$2 AND \"event_code\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, moduleCode, screenCode, eventCode)
	}
	row := exec.QueryRowContext(ctx, sql, moduleCode, screenCode, eventCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if security_event exists")
	}

	return exists, nil
}
