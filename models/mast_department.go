// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MastDepartment is an object representing the database table.
type MastDepartment struct {
	DepartmentCode string      `boil:"department_code" json:"department_code" toml:"department_code" yaml:"department_code"`
	CompanyCode    string      `boil:"company_code" json:"company_code" toml:"company_code" yaml:"company_code"`
	DepartmentName string      `boil:"department_name" json:"department_name" toml:"department_name" yaml:"department_name"`
	Deleted        bool        `boil:"deleted" json:"deleted" toml:"deleted" yaml:"deleted"`
	CreateDate     null.Time   `boil:"create_date" json:"create_date,omitempty" toml:"create_date" yaml:"create_date,omitempty"`
	ModifyDate     null.Time   `boil:"modify_date" json:"modify_date,omitempty" toml:"modify_date" yaml:"modify_date,omitempty"`
	DeletedDate    null.Time   `boil:"deleted_date" json:"deleted_date,omitempty" toml:"deleted_date" yaml:"deleted_date,omitempty"`
	CreateID       string      `boil:"create_id" json:"create_id" toml:"create_id" yaml:"create_id"`
	ModifyID       null.String `boil:"modify_id" json:"modify_id,omitempty" toml:"modify_id" yaml:"modify_id,omitempty"`
	DeletedID      null.String `boil:"deleted_id" json:"deleted_id,omitempty" toml:"deleted_id" yaml:"deleted_id,omitempty"`
	ID             int64       `boil:"id" json:"id" toml:"id" yaml:"id"`

	R *mastDepartmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mastDepartmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MastDepartmentColumns = struct {
	DepartmentCode string
	CompanyCode    string
	DepartmentName string
	Deleted        string
	CreateDate     string
	ModifyDate     string
	DeletedDate    string
	CreateID       string
	ModifyID       string
	DeletedID      string
	ID             string
}{
	DepartmentCode: "department_code",
	CompanyCode:    "company_code",
	DepartmentName: "department_name",
	Deleted:        "deleted",
	CreateDate:     "create_date",
	ModifyDate:     "modify_date",
	DeletedDate:    "deleted_date",
	CreateID:       "create_id",
	ModifyID:       "modify_id",
	DeletedID:      "deleted_id",
	ID:             "id",
}

var MastDepartmentTableColumns = struct {
	DepartmentCode string
	CompanyCode    string
	DepartmentName string
	Deleted        string
	CreateDate     string
	ModifyDate     string
	DeletedDate    string
	CreateID       string
	ModifyID       string
	DeletedID      string
	ID             string
}{
	DepartmentCode: "mast_department.department_code",
	CompanyCode:    "mast_department.company_code",
	DepartmentName: "mast_department.department_name",
	Deleted:        "mast_department.deleted",
	CreateDate:     "mast_department.create_date",
	ModifyDate:     "mast_department.modify_date",
	DeletedDate:    "mast_department.deleted_date",
	CreateID:       "mast_department.create_id",
	ModifyID:       "mast_department.modify_id",
	DeletedID:      "mast_department.deleted_id",
	ID:             "mast_department.id",
}

// Generated where

var MastDepartmentWhere = struct {
	DepartmentCode whereHelperstring
	CompanyCode    whereHelperstring
	DepartmentName whereHelperstring
	Deleted        whereHelperbool
	CreateDate     whereHelpernull_Time
	ModifyDate     whereHelpernull_Time
	DeletedDate    whereHelpernull_Time
	CreateID       whereHelperstring
	ModifyID       whereHelpernull_String
	DeletedID      whereHelpernull_String
	ID             whereHelperint64
}{
	DepartmentCode: whereHelperstring{field: "\"mast_department\".\"department_code\""},
	CompanyCode:    whereHelperstring{field: "\"mast_department\".\"company_code\""},
	DepartmentName: whereHelperstring{field: "\"mast_department\".\"department_name\""},
	Deleted:        whereHelperbool{field: "\"mast_department\".\"deleted\""},
	CreateDate:     whereHelpernull_Time{field: "\"mast_department\".\"create_date\""},
	ModifyDate:     whereHelpernull_Time{field: "\"mast_department\".\"modify_date\""},
	DeletedDate:    whereHelpernull_Time{field: "\"mast_department\".\"deleted_date\""},
	CreateID:       whereHelperstring{field: "\"mast_department\".\"create_id\""},
	ModifyID:       whereHelpernull_String{field: "\"mast_department\".\"modify_id\""},
	DeletedID:      whereHelpernull_String{field: "\"mast_department\".\"deleted_id\""},
	ID:             whereHelperint64{field: "\"mast_department\".\"id\""},
}

// MastDepartmentRels is where relationship names are stored.
var MastDepartmentRels = struct {
}{}

// mastDepartmentR is where relationships are stored.
type mastDepartmentR struct {
}

// NewStruct creates a new relationship struct
func (*mastDepartmentR) NewStruct() *mastDepartmentR {
	return &mastDepartmentR{}
}

// mastDepartmentL is where Load methods for each relationship are stored.
type mastDepartmentL struct{}

var (
	mastDepartmentAllColumns            = []string{"department_code", "company_code", "department_name", "deleted", "create_date", "modify_date", "deleted_date", "create_id", "modify_id", "deleted_id", "id"}
	mastDepartmentColumnsWithoutDefault = []string{"modify_date", "deleted_date"}
	mastDepartmentColumnsWithDefault    = []string{"department_code", "company_code", "department_name", "deleted", "create_date", "create_id", "modify_id", "deleted_id", "id"}
	mastDepartmentPrimaryKeyColumns     = []string{"department_code", "company_code"}
)

type (
	// MastDepartmentSlice is an alias for a slice of pointers to MastDepartment.
	// This should almost always be used instead of []MastDepartment.
	MastDepartmentSlice []*MastDepartment
	// MastDepartmentHook is the signature for custom MastDepartment hook methods
	MastDepartmentHook func(context.Context, boil.ContextExecutor, *MastDepartment) error

	mastDepartmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mastDepartmentType                 = reflect.TypeOf(&MastDepartment{})
	mastDepartmentMapping              = queries.MakeStructMapping(mastDepartmentType)
	mastDepartmentPrimaryKeyMapping, _ = queries.BindMapping(mastDepartmentType, mastDepartmentMapping, mastDepartmentPrimaryKeyColumns)
	mastDepartmentInsertCacheMut       sync.RWMutex
	mastDepartmentInsertCache          = make(map[string]insertCache)
	mastDepartmentUpdateCacheMut       sync.RWMutex
	mastDepartmentUpdateCache          = make(map[string]updateCache)
	mastDepartmentUpsertCacheMut       sync.RWMutex
	mastDepartmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mastDepartmentBeforeInsertHooks []MastDepartmentHook
var mastDepartmentBeforeUpdateHooks []MastDepartmentHook
var mastDepartmentBeforeDeleteHooks []MastDepartmentHook
var mastDepartmentBeforeUpsertHooks []MastDepartmentHook

var mastDepartmentAfterInsertHooks []MastDepartmentHook
var mastDepartmentAfterSelectHooks []MastDepartmentHook
var mastDepartmentAfterUpdateHooks []MastDepartmentHook
var mastDepartmentAfterDeleteHooks []MastDepartmentHook
var mastDepartmentAfterUpsertHooks []MastDepartmentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MastDepartment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastDepartmentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MastDepartment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastDepartmentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MastDepartment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastDepartmentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MastDepartment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastDepartmentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MastDepartment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastDepartmentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MastDepartment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastDepartmentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MastDepartment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastDepartmentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MastDepartment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastDepartmentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MastDepartment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastDepartmentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMastDepartmentHook registers your hook function for all future operations.
func AddMastDepartmentHook(hookPoint boil.HookPoint, mastDepartmentHook MastDepartmentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mastDepartmentBeforeInsertHooks = append(mastDepartmentBeforeInsertHooks, mastDepartmentHook)
	case boil.BeforeUpdateHook:
		mastDepartmentBeforeUpdateHooks = append(mastDepartmentBeforeUpdateHooks, mastDepartmentHook)
	case boil.BeforeDeleteHook:
		mastDepartmentBeforeDeleteHooks = append(mastDepartmentBeforeDeleteHooks, mastDepartmentHook)
	case boil.BeforeUpsertHook:
		mastDepartmentBeforeUpsertHooks = append(mastDepartmentBeforeUpsertHooks, mastDepartmentHook)
	case boil.AfterInsertHook:
		mastDepartmentAfterInsertHooks = append(mastDepartmentAfterInsertHooks, mastDepartmentHook)
	case boil.AfterSelectHook:
		mastDepartmentAfterSelectHooks = append(mastDepartmentAfterSelectHooks, mastDepartmentHook)
	case boil.AfterUpdateHook:
		mastDepartmentAfterUpdateHooks = append(mastDepartmentAfterUpdateHooks, mastDepartmentHook)
	case boil.AfterDeleteHook:
		mastDepartmentAfterDeleteHooks = append(mastDepartmentAfterDeleteHooks, mastDepartmentHook)
	case boil.AfterUpsertHook:
		mastDepartmentAfterUpsertHooks = append(mastDepartmentAfterUpsertHooks, mastDepartmentHook)
	}
}

// One returns a single mastDepartment record from the query.
func (q mastDepartmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MastDepartment, error) {
	o := &MastDepartment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for mast_department")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MastDepartment records from the query.
func (q mastDepartmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (MastDepartmentSlice, error) {
	var o []*MastDepartment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MastDepartment slice")
	}

	if len(mastDepartmentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MastDepartment records in the query.
func (q mastDepartmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count mast_department rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mastDepartmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if mast_department exists")
	}

	return count > 0, nil
}

// MastDepartments retrieves all the records using an executor.
func MastDepartments(mods ...qm.QueryMod) mastDepartmentQuery {
	mods = append(mods, qm.From("\"mast_department\""))
	return mastDepartmentQuery{NewQuery(mods...)}
}

// FindMastDepartment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMastDepartment(ctx context.Context, exec boil.ContextExecutor, departmentCode string, companyCode string, selectCols ...string) (*MastDepartment, error) {
	mastDepartmentObj := &MastDepartment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mast_department\" where \"department_code\"=$1 AND \"company_code\"=$2", sel,
	)

	q := queries.Raw(query, departmentCode, companyCode)

	err := q.Bind(ctx, exec, mastDepartmentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from mast_department")
	}

	if err = mastDepartmentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mastDepartmentObj, err
	}

	return mastDepartmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MastDepartment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mast_department provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mastDepartmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mastDepartmentInsertCacheMut.RLock()
	cache, cached := mastDepartmentInsertCache[key]
	mastDepartmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mastDepartmentAllColumns,
			mastDepartmentColumnsWithDefault,
			mastDepartmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mastDepartmentType, mastDepartmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mastDepartmentType, mastDepartmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mast_department\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mast_department\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into mast_department")
	}

	if !cached {
		mastDepartmentInsertCacheMut.Lock()
		mastDepartmentInsertCache[key] = cache
		mastDepartmentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MastDepartment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MastDepartment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mastDepartmentUpdateCacheMut.RLock()
	cache, cached := mastDepartmentUpdateCache[key]
	mastDepartmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mastDepartmentAllColumns,
			mastDepartmentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update mast_department, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mast_department\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mastDepartmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mastDepartmentType, mastDepartmentMapping, append(wl, mastDepartmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update mast_department row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for mast_department")
	}

	if !cached {
		mastDepartmentUpdateCacheMut.Lock()
		mastDepartmentUpdateCache[key] = cache
		mastDepartmentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mastDepartmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for mast_department")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for mast_department")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MastDepartmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mastDepartmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mast_department\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mastDepartmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mastDepartment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mastDepartment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MastDepartment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mast_department provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mastDepartmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mastDepartmentUpsertCacheMut.RLock()
	cache, cached := mastDepartmentUpsertCache[key]
	mastDepartmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mastDepartmentAllColumns,
			mastDepartmentColumnsWithDefault,
			mastDepartmentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mastDepartmentAllColumns,
			mastDepartmentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert mast_department, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mastDepartmentPrimaryKeyColumns))
			copy(conflict, mastDepartmentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mast_department\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mastDepartmentType, mastDepartmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mastDepartmentType, mastDepartmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert mast_department")
	}

	if !cached {
		mastDepartmentUpsertCacheMut.Lock()
		mastDepartmentUpsertCache[key] = cache
		mastDepartmentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MastDepartment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MastDepartment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MastDepartment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mastDepartmentPrimaryKeyMapping)
	sql := "DELETE FROM \"mast_department\" WHERE \"department_code\"=$1 AND \"company_code\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from mast_department")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for mast_department")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mastDepartmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mastDepartmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mast_department")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mast_department")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MastDepartmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mastDepartmentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mastDepartmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mast_department\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mastDepartmentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mastDepartment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mast_department")
	}

	if len(mastDepartmentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MastDepartment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMastDepartment(ctx, exec, o.DepartmentCode, o.CompanyCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MastDepartmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MastDepartmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mastDepartmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mast_department\".* FROM \"mast_department\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mastDepartmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MastDepartmentSlice")
	}

	*o = slice

	return nil
}

// MastDepartmentExists checks if the MastDepartment row exists.
func MastDepartmentExists(ctx context.Context, exec boil.ContextExecutor, departmentCode string, companyCode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mast_department\" where \"department_code\"=$1 AND \"company_code\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, departmentCode, companyCode)
	}
	row := exec.QueryRowContext(ctx, sql, departmentCode, companyCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if mast_department exists")
	}

	return exists, nil
}
