// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MastUser is an object representing the database table.
type MastUser struct {
	UserCode       string      `boil:"user_code" json:"user_code" toml:"user_code" yaml:"user_code"`
	CompanyCode    string      `boil:"company_code" json:"company_code" toml:"company_code" yaml:"company_code"`
	UserName       string      `boil:"user_name" json:"user_name" toml:"user_name" yaml:"user_name"`
	DepartmentCode string      `boil:"department_code" json:"department_code" toml:"department_code" yaml:"department_code"`
	Email          string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	TelephoneNo    string      `boil:"telephone_no" json:"telephone_no" toml:"telephone_no" yaml:"telephone_no"`
	MobileNo       null.String `boil:"mobile_no" json:"mobile_no,omitempty" toml:"mobile_no" yaml:"mobile_no,omitempty"`
	Address        null.String `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`
	Image          null.Bytes  `boil:"image" json:"image,omitempty" toml:"image" yaml:"image,omitempty"`
	LoginID        string      `boil:"login_id" json:"login_id" toml:"login_id" yaml:"login_id"`
	PasswordHash   string      `boil:"password_hash" json:"password_hash" toml:"password_hash" yaml:"password_hash"`
	Passkey        null.String `boil:"passkey" json:"passkey,omitempty" toml:"passkey" yaml:"passkey,omitempty"`
	Deleted        bool        `boil:"deleted" json:"deleted" toml:"deleted" yaml:"deleted"`
	CreateDate     time.Time   `boil:"create_date" json:"create_date" toml:"create_date" yaml:"create_date"`
	ModifyDate     null.Time   `boil:"modify_date" json:"modify_date,omitempty" toml:"modify_date" yaml:"modify_date,omitempty"`
	DeletedDate    null.Time   `boil:"deleted_date" json:"deleted_date,omitempty" toml:"deleted_date" yaml:"deleted_date,omitempty"`
	CreateID       string      `boil:"create_id" json:"create_id" toml:"create_id" yaml:"create_id"`
	ModifyID       null.String `boil:"modify_id" json:"modify_id,omitempty" toml:"modify_id" yaml:"modify_id,omitempty"`
	DeletedID      null.String `boil:"deleted_id" json:"deleted_id,omitempty" toml:"deleted_id" yaml:"deleted_id,omitempty"`
	ID             int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IsActive       bool        `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`

	R *mastUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mastUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MastUserColumns = struct {
	UserCode       string
	CompanyCode    string
	UserName       string
	DepartmentCode string
	Email          string
	TelephoneNo    string
	MobileNo       string
	Address        string
	Image          string
	LoginID        string
	PasswordHash   string
	Passkey        string
	Deleted        string
	CreateDate     string
	ModifyDate     string
	DeletedDate    string
	CreateID       string
	ModifyID       string
	DeletedID      string
	ID             string
	IsActive       string
}{
	UserCode:       "user_code",
	CompanyCode:    "company_code",
	UserName:       "user_name",
	DepartmentCode: "department_code",
	Email:          "email",
	TelephoneNo:    "telephone_no",
	MobileNo:       "mobile_no",
	Address:        "address",
	Image:          "image",
	LoginID:        "login_id",
	PasswordHash:   "password_hash",
	Passkey:        "passkey",
	Deleted:        "deleted",
	CreateDate:     "create_date",
	ModifyDate:     "modify_date",
	DeletedDate:    "deleted_date",
	CreateID:       "create_id",
	ModifyID:       "modify_id",
	DeletedID:      "deleted_id",
	ID:             "id",
	IsActive:       "is_active",
}

var MastUserTableColumns = struct {
	UserCode       string
	CompanyCode    string
	UserName       string
	DepartmentCode string
	Email          string
	TelephoneNo    string
	MobileNo       string
	Address        string
	Image          string
	LoginID        string
	PasswordHash   string
	Passkey        string
	Deleted        string
	CreateDate     string
	ModifyDate     string
	DeletedDate    string
	CreateID       string
	ModifyID       string
	DeletedID      string
	ID             string
	IsActive       string
}{
	UserCode:       "mast_users.user_code",
	CompanyCode:    "mast_users.company_code",
	UserName:       "mast_users.user_name",
	DepartmentCode: "mast_users.department_code",
	Email:          "mast_users.email",
	TelephoneNo:    "mast_users.telephone_no",
	MobileNo:       "mast_users.mobile_no",
	Address:        "mast_users.address",
	Image:          "mast_users.image",
	LoginID:        "mast_users.login_id",
	PasswordHash:   "mast_users.password_hash",
	Passkey:        "mast_users.passkey",
	Deleted:        "mast_users.deleted",
	CreateDate:     "mast_users.create_date",
	ModifyDate:     "mast_users.modify_date",
	DeletedDate:    "mast_users.deleted_date",
	CreateID:       "mast_users.create_id",
	ModifyID:       "mast_users.modify_id",
	DeletedID:      "mast_users.deleted_id",
	ID:             "mast_users.id",
	IsActive:       "mast_users.is_active",
}

// Generated where

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var MastUserWhere = struct {
	UserCode       whereHelperstring
	CompanyCode    whereHelperstring
	UserName       whereHelperstring
	DepartmentCode whereHelperstring
	Email          whereHelperstring
	TelephoneNo    whereHelperstring
	MobileNo       whereHelpernull_String
	Address        whereHelpernull_String
	Image          whereHelpernull_Bytes
	LoginID        whereHelperstring
	PasswordHash   whereHelperstring
	Passkey        whereHelpernull_String
	Deleted        whereHelperbool
	CreateDate     whereHelpertime_Time
	ModifyDate     whereHelpernull_Time
	DeletedDate    whereHelpernull_Time
	CreateID       whereHelperstring
	ModifyID       whereHelpernull_String
	DeletedID      whereHelpernull_String
	ID             whereHelperint64
	IsActive       whereHelperbool
}{
	UserCode:       whereHelperstring{field: "\"mast_users\".\"user_code\""},
	CompanyCode:    whereHelperstring{field: "\"mast_users\".\"company_code\""},
	UserName:       whereHelperstring{field: "\"mast_users\".\"user_name\""},
	DepartmentCode: whereHelperstring{field: "\"mast_users\".\"department_code\""},
	Email:          whereHelperstring{field: "\"mast_users\".\"email\""},
	TelephoneNo:    whereHelperstring{field: "\"mast_users\".\"telephone_no\""},
	MobileNo:       whereHelpernull_String{field: "\"mast_users\".\"mobile_no\""},
	Address:        whereHelpernull_String{field: "\"mast_users\".\"address\""},
	Image:          whereHelpernull_Bytes{field: "\"mast_users\".\"image\""},
	LoginID:        whereHelperstring{field: "\"mast_users\".\"login_id\""},
	PasswordHash:   whereHelperstring{field: "\"mast_users\".\"password_hash\""},
	Passkey:        whereHelpernull_String{field: "\"mast_users\".\"passkey\""},
	Deleted:        whereHelperbool{field: "\"mast_users\".\"deleted\""},
	CreateDate:     whereHelpertime_Time{field: "\"mast_users\".\"create_date\""},
	ModifyDate:     whereHelpernull_Time{field: "\"mast_users\".\"modify_date\""},
	DeletedDate:    whereHelpernull_Time{field: "\"mast_users\".\"deleted_date\""},
	CreateID:       whereHelperstring{field: "\"mast_users\".\"create_id\""},
	ModifyID:       whereHelpernull_String{field: "\"mast_users\".\"modify_id\""},
	DeletedID:      whereHelpernull_String{field: "\"mast_users\".\"deleted_id\""},
	ID:             whereHelperint64{field: "\"mast_users\".\"id\""},
	IsActive:       whereHelperbool{field: "\"mast_users\".\"is_active\""},
}

// MastUserRels is where relationship names are stored.
var MastUserRels = struct {
}{}

// mastUserR is where relationships are stored.
type mastUserR struct {
}

// NewStruct creates a new relationship struct
func (*mastUserR) NewStruct() *mastUserR {
	return &mastUserR{}
}

// mastUserL is where Load methods for each relationship are stored.
type mastUserL struct{}

var (
	mastUserAllColumns            = []string{"user_code", "company_code", "user_name", "department_code", "email", "telephone_no", "mobile_no", "address", "image", "login_id", "password_hash", "passkey", "deleted", "create_date", "modify_date", "deleted_date", "create_id", "modify_id", "deleted_id", "id", "is_active"}
	mastUserColumnsWithoutDefault = []string{"image", "password_hash", "modify_date", "deleted_date"}
	mastUserColumnsWithDefault    = []string{"user_code", "company_code", "user_name", "department_code", "email", "telephone_no", "mobile_no", "address", "login_id", "passkey", "deleted", "create_date", "create_id", "modify_id", "deleted_id", "id", "is_active"}
	mastUserPrimaryKeyColumns     = []string{"user_code", "company_code"}
)

type (
	// MastUserSlice is an alias for a slice of pointers to MastUser.
	// This should almost always be used instead of []MastUser.
	MastUserSlice []*MastUser
	// MastUserHook is the signature for custom MastUser hook methods
	MastUserHook func(context.Context, boil.ContextExecutor, *MastUser) error

	mastUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mastUserType                 = reflect.TypeOf(&MastUser{})
	mastUserMapping              = queries.MakeStructMapping(mastUserType)
	mastUserPrimaryKeyMapping, _ = queries.BindMapping(mastUserType, mastUserMapping, mastUserPrimaryKeyColumns)
	mastUserInsertCacheMut       sync.RWMutex
	mastUserInsertCache          = make(map[string]insertCache)
	mastUserUpdateCacheMut       sync.RWMutex
	mastUserUpdateCache          = make(map[string]updateCache)
	mastUserUpsertCacheMut       sync.RWMutex
	mastUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mastUserBeforeInsertHooks []MastUserHook
var mastUserBeforeUpdateHooks []MastUserHook
var mastUserBeforeDeleteHooks []MastUserHook
var mastUserBeforeUpsertHooks []MastUserHook

var mastUserAfterInsertHooks []MastUserHook
var mastUserAfterSelectHooks []MastUserHook
var mastUserAfterUpdateHooks []MastUserHook
var mastUserAfterDeleteHooks []MastUserHook
var mastUserAfterUpsertHooks []MastUserHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MastUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MastUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MastUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MastUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MastUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MastUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MastUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MastUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MastUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mastUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMastUserHook registers your hook function for all future operations.
func AddMastUserHook(hookPoint boil.HookPoint, mastUserHook MastUserHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mastUserBeforeInsertHooks = append(mastUserBeforeInsertHooks, mastUserHook)
	case boil.BeforeUpdateHook:
		mastUserBeforeUpdateHooks = append(mastUserBeforeUpdateHooks, mastUserHook)
	case boil.BeforeDeleteHook:
		mastUserBeforeDeleteHooks = append(mastUserBeforeDeleteHooks, mastUserHook)
	case boil.BeforeUpsertHook:
		mastUserBeforeUpsertHooks = append(mastUserBeforeUpsertHooks, mastUserHook)
	case boil.AfterInsertHook:
		mastUserAfterInsertHooks = append(mastUserAfterInsertHooks, mastUserHook)
	case boil.AfterSelectHook:
		mastUserAfterSelectHooks = append(mastUserAfterSelectHooks, mastUserHook)
	case boil.AfterUpdateHook:
		mastUserAfterUpdateHooks = append(mastUserAfterUpdateHooks, mastUserHook)
	case boil.AfterDeleteHook:
		mastUserAfterDeleteHooks = append(mastUserAfterDeleteHooks, mastUserHook)
	case boil.AfterUpsertHook:
		mastUserAfterUpsertHooks = append(mastUserAfterUpsertHooks, mastUserHook)
	}
}

// One returns a single mastUser record from the query.
func (q mastUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MastUser, error) {
	o := &MastUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for mast_users")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MastUser records from the query.
func (q mastUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (MastUserSlice, error) {
	var o []*MastUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MastUser slice")
	}

	if len(mastUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MastUser records in the query.
func (q mastUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count mast_users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mastUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if mast_users exists")
	}

	return count > 0, nil
}

// MastUsers retrieves all the records using an executor.
func MastUsers(mods ...qm.QueryMod) mastUserQuery {
	mods = append(mods, qm.From("\"mast_users\""))
	return mastUserQuery{NewQuery(mods...)}
}

// FindMastUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMastUser(ctx context.Context, exec boil.ContextExecutor, userCode string, companyCode string, selectCols ...string) (*MastUser, error) {
	mastUserObj := &MastUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mast_users\" where \"user_code\"=$1 AND \"company_code\"=$2", sel,
	)

	q := queries.Raw(query, userCode, companyCode)

	err := q.Bind(ctx, exec, mastUserObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from mast_users")
	}

	if err = mastUserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mastUserObj, err
	}

	return mastUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MastUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mast_users provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mastUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mastUserInsertCacheMut.RLock()
	cache, cached := mastUserInsertCache[key]
	mastUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mastUserAllColumns,
			mastUserColumnsWithDefault,
			mastUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mastUserType, mastUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mastUserType, mastUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mast_users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mast_users\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into mast_users")
	}

	if !cached {
		mastUserInsertCacheMut.Lock()
		mastUserInsertCache[key] = cache
		mastUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MastUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MastUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mastUserUpdateCacheMut.RLock()
	cache, cached := mastUserUpdateCache[key]
	mastUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mastUserAllColumns,
			mastUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update mast_users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mast_users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mastUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mastUserType, mastUserMapping, append(wl, mastUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update mast_users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for mast_users")
	}

	if !cached {
		mastUserUpdateCacheMut.Lock()
		mastUserUpdateCache[key] = cache
		mastUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mastUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for mast_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for mast_users")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MastUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mastUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mast_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mastUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mastUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mastUser")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MastUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mast_users provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mastUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mastUserUpsertCacheMut.RLock()
	cache, cached := mastUserUpsertCache[key]
	mastUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mastUserAllColumns,
			mastUserColumnsWithDefault,
			mastUserColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mastUserAllColumns,
			mastUserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert mast_users, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mastUserPrimaryKeyColumns))
			copy(conflict, mastUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mast_users\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mastUserType, mastUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mastUserType, mastUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert mast_users")
	}

	if !cached {
		mastUserUpsertCacheMut.Lock()
		mastUserUpsertCache[key] = cache
		mastUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MastUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MastUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MastUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mastUserPrimaryKeyMapping)
	sql := "DELETE FROM \"mast_users\" WHERE \"user_code\"=$1 AND \"company_code\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from mast_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for mast_users")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mastUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mastUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mast_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mast_users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MastUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mastUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mastUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mast_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mastUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mastUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mast_users")
	}

	if len(mastUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MastUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMastUser(ctx, exec, o.UserCode, o.CompanyCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MastUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MastUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mastUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mast_users\".* FROM \"mast_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mastUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MastUserSlice")
	}

	*o = slice

	return nil
}

// MastUserExists checks if the MastUser row exists.
func MastUserExists(ctx context.Context, exec boil.ContextExecutor, userCode string, companyCode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mast_users\" where \"user_code\"=$1 AND \"company_code\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userCode, companyCode)
	}
	row := exec.QueryRowContext(ctx, sql, userCode, companyCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if mast_users exists")
	}

	return exists, nil
}
