// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SecurityScreen is an object representing the database table.
type SecurityScreen struct {
	ModuleCode string `boil:"module_code" json:"module_code" toml:"module_code" yaml:"module_code"`
	ScreenCode string `boil:"screen_code" json:"screen_code" toml:"screen_code" yaml:"screen_code"`
	ScreenName string `boil:"screen_name" json:"screen_name" toml:"screen_name" yaml:"screen_name"`
	MenuHeader string `boil:"menu_header" json:"menu_header" toml:"menu_header" yaml:"menu_header"`

	R *securityScreenR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L securityScreenL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SecurityScreenColumns = struct {
	ModuleCode string
	ScreenCode string
	ScreenName string
	MenuHeader string
}{
	ModuleCode: "module_code",
	ScreenCode: "screen_code",
	ScreenName: "screen_name",
	MenuHeader: "menu_header",
}

var SecurityScreenTableColumns = struct {
	ModuleCode string
	ScreenCode string
	ScreenName string
	MenuHeader string
}{
	ModuleCode: "security_screen.module_code",
	ScreenCode: "security_screen.screen_code",
	ScreenName: "security_screen.screen_name",
	MenuHeader: "security_screen.menu_header",
}

// Generated where

var SecurityScreenWhere = struct {
	ModuleCode whereHelperstring
	ScreenCode whereHelperstring
	ScreenName whereHelperstring
	MenuHeader whereHelperstring
}{
	ModuleCode: whereHelperstring{field: "\"security_screen\".\"module_code\""},
	ScreenCode: whereHelperstring{field: "\"security_screen\".\"screen_code\""},
	ScreenName: whereHelperstring{field: "\"security_screen\".\"screen_name\""},
	MenuHeader: whereHelperstring{field: "\"security_screen\".\"menu_header\""},
}

// SecurityScreenRels is where relationship names are stored.
var SecurityScreenRels = struct {
}{}

// securityScreenR is where relationships are stored.
type securityScreenR struct {
}

// NewStruct creates a new relationship struct
func (*securityScreenR) NewStruct() *securityScreenR {
	return &securityScreenR{}
}

// securityScreenL is where Load methods for each relationship are stored.
type securityScreenL struct{}

var (
	securityScreenAllColumns            = []string{"module_code", "screen_code", "screen_name", "menu_header"}
	securityScreenColumnsWithoutDefault = []string{"module_code", "screen_code", "screen_name", "menu_header"}
	securityScreenColumnsWithDefault    = []string{}
	securityScreenPrimaryKeyColumns     = []string{"module_code", "screen_code"}
)

type (
	// SecurityScreenSlice is an alias for a slice of pointers to SecurityScreen.
	// This should almost always be used instead of []SecurityScreen.
	SecurityScreenSlice []*SecurityScreen
	// SecurityScreenHook is the signature for custom SecurityScreen hook methods
	SecurityScreenHook func(context.Context, boil.ContextExecutor, *SecurityScreen) error

	securityScreenQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	securityScreenType                 = reflect.TypeOf(&SecurityScreen{})
	securityScreenMapping              = queries.MakeStructMapping(securityScreenType)
	securityScreenPrimaryKeyMapping, _ = queries.BindMapping(securityScreenType, securityScreenMapping, securityScreenPrimaryKeyColumns)
	securityScreenInsertCacheMut       sync.RWMutex
	securityScreenInsertCache          = make(map[string]insertCache)
	securityScreenUpdateCacheMut       sync.RWMutex
	securityScreenUpdateCache          = make(map[string]updateCache)
	securityScreenUpsertCacheMut       sync.RWMutex
	securityScreenUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var securityScreenBeforeInsertHooks []SecurityScreenHook
var securityScreenBeforeUpdateHooks []SecurityScreenHook
var securityScreenBeforeDeleteHooks []SecurityScreenHook
var securityScreenBeforeUpsertHooks []SecurityScreenHook

var securityScreenAfterInsertHooks []SecurityScreenHook
var securityScreenAfterSelectHooks []SecurityScreenHook
var securityScreenAfterUpdateHooks []SecurityScreenHook
var securityScreenAfterDeleteHooks []SecurityScreenHook
var securityScreenAfterUpsertHooks []SecurityScreenHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SecurityScreen) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range securityScreenBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SecurityScreen) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range securityScreenBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SecurityScreen) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range securityScreenBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SecurityScreen) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range securityScreenBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SecurityScreen) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range securityScreenAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SecurityScreen) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range securityScreenAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SecurityScreen) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range securityScreenAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SecurityScreen) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range securityScreenAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SecurityScreen) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range securityScreenAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSecurityScreenHook registers your hook function for all future operations.
func AddSecurityScreenHook(hookPoint boil.HookPoint, securityScreenHook SecurityScreenHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		securityScreenBeforeInsertHooks = append(securityScreenBeforeInsertHooks, securityScreenHook)
	case boil.BeforeUpdateHook:
		securityScreenBeforeUpdateHooks = append(securityScreenBeforeUpdateHooks, securityScreenHook)
	case boil.BeforeDeleteHook:
		securityScreenBeforeDeleteHooks = append(securityScreenBeforeDeleteHooks, securityScreenHook)
	case boil.BeforeUpsertHook:
		securityScreenBeforeUpsertHooks = append(securityScreenBeforeUpsertHooks, securityScreenHook)
	case boil.AfterInsertHook:
		securityScreenAfterInsertHooks = append(securityScreenAfterInsertHooks, securityScreenHook)
	case boil.AfterSelectHook:
		securityScreenAfterSelectHooks = append(securityScreenAfterSelectHooks, securityScreenHook)
	case boil.AfterUpdateHook:
		securityScreenAfterUpdateHooks = append(securityScreenAfterUpdateHooks, securityScreenHook)
	case boil.AfterDeleteHook:
		securityScreenAfterDeleteHooks = append(securityScreenAfterDeleteHooks, securityScreenHook)
	case boil.AfterUpsertHook:
		securityScreenAfterUpsertHooks = append(securityScreenAfterUpsertHooks, securityScreenHook)
	}
}

// One returns a single securityScreen record from the query.
func (q securityScreenQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SecurityScreen, error) {
	o := &SecurityScreen{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for security_screen")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SecurityScreen records from the query.
func (q securityScreenQuery) All(ctx context.Context, exec boil.ContextExecutor) (SecurityScreenSlice, error) {
	var o []*SecurityScreen

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SecurityScreen slice")
	}

	if len(securityScreenAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SecurityScreen records in the query.
func (q securityScreenQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count security_screen rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q securityScreenQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if security_screen exists")
	}

	return count > 0, nil
}

// SecurityScreens retrieves all the records using an executor.
func SecurityScreens(mods ...qm.QueryMod) securityScreenQuery {
	mods = append(mods, qm.From("\"security_screen\""))
	return securityScreenQuery{NewQuery(mods...)}
}

// FindSecurityScreen retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSecurityScreen(ctx context.Context, exec boil.ContextExecutor, moduleCode string, screenCode string, selectCols ...string) (*SecurityScreen, error) {
	securityScreenObj := &SecurityScreen{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"security_screen\" where \"module_code\"=$1 AND \"screen_code\"=$2", sel,
	)

	q := queries.Raw(query, moduleCode, screenCode)

	err := q.Bind(ctx, exec, securityScreenObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from security_screen")
	}

	if err = securityScreenObj.doAfterSelectHooks(ctx, exec); err != nil {
		return securityScreenObj, err
	}

	return securityScreenObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SecurityScreen) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no security_screen provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(securityScreenColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	securityScreenInsertCacheMut.RLock()
	cache, cached := securityScreenInsertCache[key]
	securityScreenInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			securityScreenAllColumns,
			securityScreenColumnsWithDefault,
			securityScreenColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(securityScreenType, securityScreenMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(securityScreenType, securityScreenMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"security_screen\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"security_screen\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into security_screen")
	}

	if !cached {
		securityScreenInsertCacheMut.Lock()
		securityScreenInsertCache[key] = cache
		securityScreenInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SecurityScreen.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SecurityScreen) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	securityScreenUpdateCacheMut.RLock()
	cache, cached := securityScreenUpdateCache[key]
	securityScreenUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			securityScreenAllColumns,
			securityScreenPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update security_screen, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"security_screen\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, securityScreenPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(securityScreenType, securityScreenMapping, append(wl, securityScreenPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update security_screen row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for security_screen")
	}

	if !cached {
		securityScreenUpdateCacheMut.Lock()
		securityScreenUpdateCache[key] = cache
		securityScreenUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q securityScreenQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for security_screen")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for security_screen")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SecurityScreenSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), securityScreenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"security_screen\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, securityScreenPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in securityScreen slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all securityScreen")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SecurityScreen) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no security_screen provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(securityScreenColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	securityScreenUpsertCacheMut.RLock()
	cache, cached := securityScreenUpsertCache[key]
	securityScreenUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			securityScreenAllColumns,
			securityScreenColumnsWithDefault,
			securityScreenColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			securityScreenAllColumns,
			securityScreenPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert security_screen, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(securityScreenPrimaryKeyColumns))
			copy(conflict, securityScreenPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"security_screen\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(securityScreenType, securityScreenMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(securityScreenType, securityScreenMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert security_screen")
	}

	if !cached {
		securityScreenUpsertCacheMut.Lock()
		securityScreenUpsertCache[key] = cache
		securityScreenUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SecurityScreen record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SecurityScreen) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SecurityScreen provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), securityScreenPrimaryKeyMapping)
	sql := "DELETE FROM \"security_screen\" WHERE \"module_code\"=$1 AND \"screen_code\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from security_screen")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for security_screen")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q securityScreenQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no securityScreenQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from security_screen")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for security_screen")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SecurityScreenSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(securityScreenBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), securityScreenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"security_screen\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, securityScreenPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from securityScreen slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for security_screen")
	}

	if len(securityScreenAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SecurityScreen) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSecurityScreen(ctx, exec, o.ModuleCode, o.ScreenCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SecurityScreenSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SecurityScreenSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), securityScreenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"security_screen\".* FROM \"security_screen\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, securityScreenPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SecurityScreenSlice")
	}

	*o = slice

	return nil
}

// SecurityScreenExists checks if the SecurityScreen row exists.
func SecurityScreenExists(ctx context.Context, exec boil.ContextExecutor, moduleCode string, screenCode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"security_screen\" where \"module_code\"=$1 AND \"screen_code\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, moduleCode, screenCode)
	}
	row := exec.QueryRowContext(ctx, sql, moduleCode, screenCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if security_screen exists")
	}

	return exists, nil
}
